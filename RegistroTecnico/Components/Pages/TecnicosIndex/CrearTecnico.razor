@page "/TecnicosIndex/CrearTecnico"
@inject TecnicoServices tecnicoService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Crear Técnico</PageTitle>

<EditForm Model="@Tecnico" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Técnico</h5>
            </div>

            <div class="card-body">

                @* Nombre *@
                <div class="mb-3">
                    <label class="form-label"><strong>Nombre</strong></label>
                    <InputText class="form-control" @bind-Value="@Tecnico.Nombre" />
                    <ValidationMessage For="@(() => Tecnico.Nombre)" />
                </div>

                @* Sueldo por Hora *@
                <div class="mb-3">
                    <label class="form-label"><strong>Sueldo por Hora</strong></label>
                    <InputNumber class="form-control" @bind-Value="@Tecnico.SueldoHora" />
                    <ValidationMessage For="@(() => Tecnico.SueldoHora)" />
                </div>

                @* Mostrar error si ocurre *@
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger mt-2">
                        <strong>Error:</strong> @ErrorMessage
                    </div>
                }
            </div>

            @* Footer *@
            <div class="card-footer text-center mt-2">
                <a href="/TecnicosIndex/Tecnicos" class="btn btn-secondary"> <span class="bi bi-arrow-left"></span> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TecnicoID { get; set; }

    public RegistroTecnico.Models.Tecnicos Tecnico = new RegistroTecnico.Models.Tecnicos();
    public string ErrorMessage { get; set; } = string.Empty;

    public void Nuevo()
    {
        Tecnico = new RegistroTecnico.Models.Tecnicos();
        ErrorMessage = string.Empty;
    }

    private async Task OnValidSubmit()
    {
        try
        {
            // Intentar guardar el técnico
            if (await tecnicoService.Guardar(Tecnico))
            {
                Nuevo(); // Limpia el formulario después de guardar
                navigationManager.NavigateTo("/TecnicosIndex/Tecnicos");
            }
        }
        catch (InvalidOperationException ex)
        {
            // Capturar errores y asignar mensaje de error
            ErrorMessage = ex.Message;
        }
    }
}

